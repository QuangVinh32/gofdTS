// class EditorPolygon extends Phaser.Scene {
//     constructor(scene) {    
//         super("editPolygon");
//         this.scene = scene; // Gán scene khi khởi tạo
//         this.points = [];
//         this.rectsOnEdges = [];
//         this.texts = [];
//         this.dragStartPos = null;
//         this.line = null;
//         this.isPaused = false;
//     }

//     preload() {
//         this.load.image("ball", "assets/images/ball.png");
//     }

//     create() {
//         // this.input.on('pointerdown', this.addPoint, this);
//         // this.matter.world.setBounds().disableGravity();
//         // this.scene.matter.world.setBounds().disableGravity();
//         this.scene.input.on('pointerdown', this.addPoint, this);

//         // this.graphics = this.add.graphics();
//         this.graphics = this.scene.add.graphics();

//         // this.keyQ = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.Q);
//         this.keyQ = this.scene.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.Q);
        
//         this.drawPolygon();

//         // const ball = this.matter.add.image(509, 290, "ball").setDisplaySize(10, 10);
//         const ball = this.scene.matter.add.image(509, 290, "ball").setDisplaySize(10, 10);
//         ball.setCircle(5);
//         ball.setBounce(1);
//         ball.setFriction(0.001);

//         // Xử lý khi nhấn chuột vào quả bóng
//         this.scene.input.on('pointerdown', (pointer) => {
//             // Kiểm tra nếu pointer chạm vào ball
//             const bodies = Phaser.Physics.Matter.Matter.Query.point([ball.body], pointer);
//             if (bodies.length > 0) {
//                 this.isDragging = true;
//                 this.dragStartPos = { x: ball.x, y: ball.y };

//                 // Tạo đường thẳng chỉ hướng kéo
//                 this.line = this.scene.add.line(0, 0, ball.x, ball.y, pointer.x, pointer.y, 0xff00ff);
//                 this.line.setLineWidth(2);
//             }
//         });

//         // Xử lý khi kéo chuột
//         this.scene.input.on('pointermove', (pointer) => {
//             if (this.isDragging && this.line) {
//                 this.line.setTo(ball.x, ball.y, pointer.x, pointer.y);
//             }
//         });

//         // Xử lý khi thả chuột
//         this.scene.input.on('pointerup', (pointer) => {
//             if (this.isDragging) {
//                 this.isDragging = false;

//                 // Tính toán hướng và vận tốc
//                 const directionX = pointer.x - this.dragStartPos.x;
//                 const directionY = pointer.y - this.dragStartPos.y;

//                 const velocityX = -directionX * 0.1;
//                 const velocityY = -directionY * 0.1;

//                 // Đặt vận tốc cho quả bóng
//                 ball.setVelocity(velocityX, velocityY);

//                 // Xóa đường thẳng chỉ hướng
//                 if (this.line) {
//                     this.line.destroy();
//                     this.line = null;
//                 }
//             }
//         });
    
//     }

//     update() {
//         if (this.keyQ.isDown) {
//             this.isPaused = !this.isPaused; // Chuyển đổi trạng thái tạm dừng
//             console.log("Đã chuyển đổi tạm dừng:", this.isPaused);
//         }
//     }

//     addPoint(pointer) {
//         if (this.isPaused) return; // Ngăn chặn việc thêm điểm nếu đang tạm dừng

//         const newPoint = new Phaser.Math.Vector2(pointer.x, pointer.y);
//         this.points.push(newPoint);
//         this.drawPolygon();
//         console.log('Point added:', newPoint);

//         // Ví dụ vẽ điểm lên màn hình
//         this.graphics.fillStyle(0xff0000, 1);  // Đặt màu đỏ
//         this.graphics.fillCircle(pointer.x, pointer.y, 5);  // Vẽ một hình tròn tại điểm được nhấp
//     }

//     drawPolygon() {
//         this.graphics.clear();
//         this.rectsOnEdges.forEach(rect => rect.destroy());
//         this.rectsOnEdges = [];
//         this.texts.forEach(text => text.destroy());
//         this.texts = [];

//         if (this.points.length > 1) {
//             this.graphics.lineStyle(2, 0x002bff, 1);
//             this.graphics.beginPath();
//             this.graphics.moveTo(this.points[0].x, this.points[0].y);

//             for (let i = 1; i < this.points.length; i++) {
//                 this.graphics.lineTo(this.points[i].x, this.points[i].y);
//             }

//             this.graphics.lineTo(this.points[0].x, this.points[0].y);
//             this.graphics.strokePath();
//             this.drawRectanglesOnEdges();
//             this.displayCoordinates();
//         }
//     }
//     drawRectanglesOnEdges() {
//         for (let i = 0; i < this.points.length; i++) {
//             const pointA = this.points[i];
//             const pointB = this.points[(i + 1) % this.points.length];

//             const length = Phaser.Math.Distance.Between(pointA.x, pointA.y, pointB.x, pointB.y);
//             const angle = Phaser.Math.Angle.Between(pointA.x, pointA.y, pointB.x, pointB.y);
//             const height = 25;

//             const normalX = Math.cos(angle + Math.PI / 2);
//             const normalY = Math.sin(angle + Math.PI / 2);
//             const offsetX = normalX * height / 2;
//             const offsetY = normalY * height / 2;

//             const midPointX = (pointA.x + pointB.x) / 2;
//             const midPointY = (pointA.y + pointB.y) / 2;

//             const rect = this.scene.add.rectangle(midPointX, midPointY, length, height, 0xff5500, 0.5);
//             rect.setPosition(midPointX + offsetX, midPointY + offsetY);

//             this.scene.matter.add.gameObject(rect, {
//                 shape: { type: 'rectangle', width: length, height: height },
//                 angle: angle,
//                 isStatic: true,
//                 restitution: 0
//             });

//             this.rectsOnEdges.push(rect);
//         }
//     }

//     displayCoordinates() {
//         this.points.forEach(point => {
//             const text = this.scene.add.text(point.x - 15, point.y - 15, `(${Math.round(point.x)}, ${Math.round(point.y)})`, {
//                 fontSize: '12px',
//                 fill: '#00ff00'
//             });
//             this.texts.push(text);
//         });
//     }
// }



